{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getCats","axios","get","headers","Access-Control-Allow-Origin","Access-Control-Allow-Headers","Access-Control-Allow-Methods","Content-Type","then","res","data","url","setState","image","catch","error","console","log","bind","assertThisInitialized","state","react_default","a","createElement","className","type","onClick","src","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"8PAkDeA,qBA7Cb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAORQ,QAAU,WAERC,IAAMC,IAAI,6CAA8C,CACtDC,QAAS,CACPC,8BAA+B,IAC/BC,+BAAgC,gBAChCC,+BAAgC,yCAChCC,eAAgB,oCAGnBC,KAAK,SAAAC,GAEMA,EAAIC,KAAK,GAAGC,IACtBlB,EAAKmB,SAAS,CACZC,MAAOJ,EAAIC,KAAK,GAAGC,QAIpBG,MAAM,SAAAC,GAAK,OACVC,QAAQC,IAAIF,MAzBhBtB,EAAKO,QAAUP,EAAKO,QAAQkB,KAAbxB,OAAAyB,EAAA,EAAAzB,CAAAD,IACfA,EAAK2B,MAAQ,CACXP,MAAO,IAJOpB,wEA+BhB,OACE4B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,UAAQE,KAAK,SAASD,UAAU,YAAYE,QAAS9B,KAAKI,SAA1D,gBAEFqB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKI,IAAK/B,KAAKwB,MAAMP,iBAvCbe,cCQZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACT5B,KAAK,SAAAiC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBvB,QACfkB,UAAUC,cAAcO,YAI1B9B,QAAQC,IACN,iHAKEoB,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlBzB,QAAQC,IAAI,sCAGRoB,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,UAO5B3B,MAAM,SAAAC,GACLC,QAAQD,MAAM,4CAA6CA,KC3FjEkC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SDiB1C,SAAkBhB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIgB,IAAIC,oBAAwBxB,OAAOC,SAASwB,MACpDC,SAAW1B,OAAOC,SAASyB,OAIvC,OAGF1B,OAAO2B,iBAAiB,OAAQ,WAC9B,IAAMtB,EAAK,GAAAuB,OAAMJ,oBAAN,sBAEP1B,GAgEV,SAAiCO,EAAOC,GAEtCuB,MAAMxB,GACH5B,KAAK,SAAAqD,GAEJ,IAAMC,EAAcD,EAAS1D,QAAQD,IAAI,gBAEnB,MAApB2D,EAASE,QACO,MAAfD,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5C1B,UAAUC,cAAc0B,MAAMzD,KAAK,SAAAiC,GACjCA,EAAayB,aAAa1D,KAAK,WAC7BuB,OAAOC,SAASmC,aAKpBhC,EAAgBC,EAAOC,KAG1BvB,MAAM,WACLE,QAAQC,IACN,mEArFAmD,CAAwBhC,EAAOC,GAI/BC,UAAUC,cAAc0B,MAAMzD,KAAK,WACjCQ,QAAQC,IACN,gHAMJkB,EAAgBC,EAAOC,MCxC/BE","file":"static/js/main.77a8c02f.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nclass App extends Component{\n  constructor(props){\n    super(props);\n    this.getCats = this.getCats.bind(this);\n    this.state = {\n      image: \"\"\n    }\n  }\n\n  getCats = ()=>{\n    // console.log(\"teste\");\n    axios.get('https://api.thecatapi.com/v1/images/search', {\n      headers: {                  \n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Access-Control-Allow-Headers\": \"Authorization\", \n        \"Access-Control-Allow-Methods\": \"GET, POST, OPTIONS, PUT, PATCH, DELETE\" ,\n        \"Content-Type\": \"application/json;charset=UTF-8\"                   \n      }\n    })\n    .then(res => {\n      // console.log(res.data[0].url);\n      let src = res.data[0].url;\n      this.setState({\n        image: res.data[0].url\n      });\n      // console.log(this.state.main_image);\n    })\n      .catch(error =>\n        console.log(error));\n  }\n\n  render(){\n    return (\n      <div className=\"App text-center\">\n        <h2>Hi!</h2>\n        <div className=\"text-center\">\n          <button type=\"button\" className=\"btn-catch\" onClick={this.getCats}>Catch a cat</button>\n        </div>\n        <div className=\"App_image\">\n          <img src={this.state.image} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('main'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}